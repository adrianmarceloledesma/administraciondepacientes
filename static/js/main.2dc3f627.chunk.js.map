{"version":3,"sources":["components/form.js","components/cita.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","useState","mascota","dueño","fecha","hora","sintomas","cita","setCita","error","setError","handleChange","e","target","name","value","className","onSubmit","preventDefault","trim","crearCita","id","Math","random","type","onChange","Cita","citaa","onClick","eliminarCita","App","citas","setCitas","nuevasCitas","filter","titulo","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"+WA+GeA,MA7Gf,SAAcC,GAAQ,IAAD,EACOC,mBAAS,CAC7BC,QAAQ,GACRC,WAAM,GACNC,MAAM,GACNC,KAAK,GACLC,SAAS,KANI,mBACVC,EADU,KACJC,EADI,OAUSP,oBAAS,GAVlB,mBAUVQ,EAVU,KAUHC,EAVG,KAcXC,EAAe,SAACC,GAClBJ,EAAQ,2BACDD,GADA,kBAEFK,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UA0ClC,OACI,yBAAKC,UAAU,gBACX,0CAEIP,EAAO,gEAA2C,KAEtD,0BAAMQ,SA5CE,SAACL,GACbA,EAAEM,iBAGyB,KAAxBX,EAAKL,QAAQiB,QAAuC,KAAtBZ,EAAKJ,WAAMgB,QAAuC,KAAtBZ,EAAKH,MAAMe,QAAsC,KAArBZ,EAAKF,KAAKc,QAC1E,KAAzBZ,EAAKD,SAASa,QAMdT,GAAS,GAMTV,EAAMoB,UAAUb,GAOhBA,EAAKc,GAAKC,KAAKC,SAIff,EAAQ,CACJN,QAAQ,GACRC,WAAM,GACNC,MAAM,GACNC,KAAK,GACLC,SAAS,MA3BTI,GAAS,KAuCL,iDACA,2BACGc,KAAK,OACLV,KAAK,UACLW,SAAUd,EACVI,MAAOR,EAAKL,UAEf,kDACA,2BACGsB,KAAK,OACLV,KAAK,WACLW,SAAUd,EACVI,MAAOR,EAAKJ,aAEf,wCACA,2BACGqB,KAAK,OACLV,KAAK,QACLW,SAAUd,EACVI,MAAOR,EAAKH,QAEf,uCACA,2BACGoB,KAAK,OACLV,KAAK,OACLW,SAAUd,EACVI,MAAOR,EAAKF,OAEf,8CACA,8BACGS,KAAK,WACLW,SAAUd,EACVI,MAAOR,EAAKD,WAGf,4BACEkB,KAAK,UADP,aCpFDE,MAjBf,SAAc1B,GACV,OACI,yBAAKgB,UAAU,mBACX,wCAAa,0BAAMA,UAAU,QAAQhB,EAAM2B,MAAMzB,UACjD,yCAAW,0BAAMc,UAAU,QAAQhB,EAAM2B,MAAMxB,aAC/C,sCAAW,0BAAMa,UAAU,QAAQhB,EAAM2B,MAAMvB,QAC/C,qCAAU,0BAAMY,UAAU,QAAQhB,EAAM2B,MAAMtB,OAC9C,4CAAc,0BAAMW,UAAU,QAAQhB,EAAM2B,MAAMrB,WAClD,2BACGkB,KAAK,SACLT,MAAM,gBACNa,QAAS,kBAAM5B,EAAM6B,aAAa7B,EAAM2B,MAAMN,SCiD9CS,MAvDf,WAAe,MAIa7B,mBAAS,IAJtB,mBAIN8B,EAJM,KAICC,EAJD,KAmBPH,EAAe,SAACR,GACpB,IAAMY,EAAcF,EAAMG,QAAO,SAAA3B,GAAI,OAAIA,EAAKc,KAAOA,KAErDW,EAASC,IAKLE,EAA0B,IAAjBJ,EAAMK,OAAe,eAAiB,uBAGrD,OACE,kBAAC,WAAD,KACE,gCACE,wDAGF,kBAAC,EAAD,CAAMhB,UA3BQ,SAACb,GACjByB,EAAS,GAAD,mBAEHD,GAFG,CAINxB,QAuBA,yBAAKS,UAAU,gBACZ,4BAAMmB,GAGJJ,EAAMM,KAAI,SAAC9B,GAAD,OACR,kBAAC,EAAD,CACGoB,MAAOpB,EACP+B,IAAK/B,EAAKc,GAEVQ,aAAcA,UCzCVU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9C,GACL+C,QAAQ/C,MAAMA,EAAMgD,c","file":"static/js/main.2dc3f627.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\nfunction Form(props) {\r\n    const [cita, setCita] = useState({\r\n        mascota:'',\r\n        dueño:'',\r\n        fecha:'',\r\n        hora:'',\r\n        sintomas:''\r\n    })\r\n    \r\n    // creamos otro state para el error\r\n    const [error, setError] = useState(false)\r\n\r\n\r\n    \r\n    const handleChange = (e) =>{\r\n        setCita({\r\n            ...cita ,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    const onSubmit =(e) =>{\r\n        e.preventDefault();\r\n\r\n        // validar\r\n        if(cita.mascota.trim() === '' || cita.dueño.trim() === '' || cita.fecha.trim() === '' || cita.hora.trim() === '' ||\r\n        cita.sintomas.trim() === '' ){\r\n            setError(true)\r\n            return;\r\n        \r\n        }\r\n        // eliminar el mensaje de error si se escribe bien despues\r\n        setError(false)\r\n\r\n  \r\n\r\n        \r\n        // crear la cita\r\n        props.crearCita(cita)\r\n         // esta recibiendo el metodo crearCita por props desde app.js, y a la vez esta pasando como prop desde esta \r\n        // prop el objeto state \"cita\" que contiene todos los datos de la mascota, dueño, fecha, etc. y asi puede \r\n        // ponerlos en el array state vacio \"citas\" de app.js\r\n               // asignar un ID\r\n\r\n               \r\n        cita.id = Math.random();\r\n        // como es un objeto se puede agregar propiedades extra\r\n\r\n        // reiniciar el formulario\r\n        setCita({\r\n            mascota:'',\r\n            dueño:'',\r\n            fecha:'',\r\n            hora:'',\r\n            sintomas:''\r\n        })\r\n    }\r\n  \r\n\r\n    return (\r\n        <div className=\"contenedores\">\r\n            <h2>Crear Cita</h2>\r\n            {\r\n                error? <p>Error! Completar Todos Los Campos</p> : null\r\n            }\r\n            <form onSubmit={onSubmit}>\r\n                <label>Nombre Mascota</label>\r\n                <input \r\n                   type=\"text\"\r\n                   name=\"mascota\"\r\n                   onChange={handleChange}\r\n                   value={cita.mascota}\r\n                />\r\n                <label>Nombre Dueño</label>\r\n                <input \r\n                   type=\"text\"\r\n                   name=\"dueño\"\r\n                   onChange={handleChange}\r\n                   value={cita.dueño}\r\n                />\r\n                <label>Fecha</label>\r\n                <input \r\n                   type=\"date\"\r\n                   name=\"fecha\"\r\n                   onChange={handleChange}\r\n                   value={cita.fecha}\r\n                />\r\n                <label>Hora</label>\r\n                <input \r\n                   type=\"time\"\r\n                   name=\"hora\" \r\n                   onChange={handleChange}\r\n                   value={cita.hora}\r\n                /> \r\n                <label>Síntomas</label>\r\n                <textarea\r\n                   name=\"sintomas\"\r\n                   onChange={handleChange}\r\n                   value={cita.sintomas}\r\n                ></textarea>    \r\n                \r\n                <button\r\n                  type=\"submit\"\r\n                >Enviar</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","import React from 'react'\r\n\r\nfunction Cita(props) {\r\n    return (\r\n        <div className=\"contenedor-cita\">\r\n            <p>Mascota : <span className=\"span\">{props.citaa.mascota}</span></p>\r\n            <p>Dueño : <span className=\"span\">{props.citaa.dueño}</span></p>\r\n            <p>Fecha : <span className=\"span\">{props.citaa.fecha}</span></p>\r\n            <p>Hora : <span className=\"span\">{props.citaa.hora}</span></p>\r\n            <p>Síntomas : <span className=\"span\">{props.citaa.sintomas}</span></p>\r\n            <input \r\n               type=\"button\"\r\n               value=\"Eliminar &times;\"\r\n               onClick={() => props.eliminarCita(props.citaa.id)}  \r\n            /> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cita\r\n","import React, { Fragment, useState} from 'react';\n\nimport './App.css';\nimport Form from './components/form';\nimport Cita from './components/cita';\n\n\nfunction App() {\n  \n\n  // agregar citas del form\n  const [citas, setCitas] = useState([])\n\n\n\n  // funcion que tome las citas actuales y agrege las nuevas\n  const crearCita = (cita) =>{\n    setCitas([\n      // tomo una copia del state asi evita que se sobreescriban los datos\n      ...citas,\n      // y agregamos el objeto que viene como prop desde form.js\n      cita\n    ])\n  }\n\n  // funcion que elimina una cita por ID\n  const eliminarCita = (id) =>{\n    const nuevasCitas = citas.filter(cita => cita.id !== id);\n     // los id que son diferentes a cita.id van a aprecer en pantalla y el que es igual se eliminará\n    setCitas(nuevasCitas);\n   \n  }\n  \n  // condicional de h2 si hay citas o no hay\n  const titulo = citas.length === 0 ? 'No Hay Citas' : 'Administra Tus Citas'\n\n\n  return (\n    <Fragment>\n      <header>\n        <h1>Administrador de Tareas</h1>\n      </header>\n\n      <Form crearCita={crearCita} />\n      <div className=\"contenedores\">\n         <h2 >{titulo}</h2>\n\n         {\n           citas.map((cita) =>\n             <Cita\n                citaa={cita}\n                key={cita.id}\n               //  viene de form.js el id\n                eliminarCita={eliminarCita}\n             />\n           )\n         }\n      </div>   \n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './normalize.css'\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}